generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                Int           @id @default(autoincrement())
  email             String // Removed @unique constraint
  firstName         String
  lastName          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  files             File[]
  application       Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId     Int
  representativeFor Application[] @relation("StudentRepresentative")
}

enum DocumentType {
  CV
  GRADES
}

model File {
  id           Int          @id @default(autoincrement())
  studentId    Int
  documentType DocumentType
  storageUrl   String
  fileName     String
  uploadedAt   DateTime     @default(now())
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Application {
  id                      Int       @id @default(autoincrement())
  coverLetterText         String    @default("")
  school                  String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  students                Student[]
  tasks                   Task[]    @relation("ApplicationToTask")
  taskpriorityids         Int[]     @default([])
  reviews                 Review[]
  comments                Comment[]
  studentRepresentative   Student?  @relation("StudentRepresentative", fields: [studentRepresentativeId], references: [id], onDelete: SetNull)
  studentRepresentativeId Int?
  status                  String    @default("Ikke p√•begynt")
}

model Task {
  id              Int           @id @default(autoincrement())
  taskName        String
  taskDescription String?
  deadline        DateTime?
  published       Boolean       @default(false)
  minStudents     Int           @default(3)
  maxStudents     Int           @default(5)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  applications    Application[] @relation("ApplicationToTask")
}

enum ReviewStatus {
  THUMBS_DOWN @map("0")
  THUMBS_UP   @map("1")
  STAR        @map("2")
}

model Review {
  id             Int           @id @default(autoincrement())
  applicationId  Int
  kindeUserId    String
  kindeGivenName String //"Cached" name
  kindeUserImage String //"Cached" image
  review         ReviewStatus?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  application    Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, kindeUserId], name: "applicationId_kindeUserId")
}

model Comment {
  id              Int         @id @default(autoincrement())
  commentText     String
  kindeUserId     String
  kindeGivenName  String //"Cached" name
  kindeFamilyName String //"Cached" family name
  kindeUserImage  String //"Cached" image
  applicationId   Int
  createdAt       DateTime    @default(now())
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  deletedAt       DateTime?

  @@index([applicationId])
}
